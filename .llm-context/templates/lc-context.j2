{% include 'lc-prompt.j2' %}
{% if project_notes %}
{{ project_notes }}
{% endif %}
# Detailed Repository Content: **{{ project_name }}**

## Instructions for AI: ‚ö†Ô∏è COMPLETE PROJECT CONTEXT PROVIDED - NO NEED TO REQUEST ADDITIONAL CONTEXT ‚ö†Ô∏è

## Quick Reference
- ‚úì = Full content included below
{% if highlights %}
- ‚óã = Outline only (structure/definitions)
{% endif %}
- ‚úó = Excluded (not included)

> Generation timestamp: {{ context_timestamp }}  
> For updates: Use lc-list-modified-files first to identify changes, then lc-get-files for specific files
> If tools are unavailable, ask the user to run the "lc-changed" CLI command

This context presents a comprehensive view of the _/{{ project_name }}_ repository.

{% if sample_requested_files %}
## Instructions for AI: üìÇ Before Requesting Any Files

1. **SEARCH THIS DOCUMENT** to check if the file is already included
2. **CHECK the repository structure** below to confirm file status (‚úì,{% if highlights %} ‚óã,{% endif %} or ‚úó)
3. Only request ‚úó{% if highlights %} or ‚óã{% endif %} files that are absolutely necessary for your analysis

{% if highlights %}
**EFFICIENCY TIP:** If you only need specific functions or methods, use lc-get-implementations instead of requesting complete files.
{% endif %}

### How to Request Missing Files

Check if lc-get-files tool is available in your environment before proceeding to option 2.

1. Using the lc-get-files tool (if available in your environment):
   **ROOT PATH must be: {{ abs_root_path }}**
   Example request:
  ```json
  {
    "root_path": "{{ abs_root_path }}",
    "paths": [{% for file in sample_requested_files %}"{{ file }}"{% if not loop.last %},{% endif %}{% endfor %}]
  }
  ```

2. Only if lc-get-files is not available, follow these steps (do NOT use the above root_path):
    1. Immediately halt your current response.
    2. Start a new response with a markdown code block (```) on a new line.
    3. List the root-relative paths of the missing files you need, one per line.
    4. Close the markdown code block with another ```.
    5. End your response.

    Example file request:
    ```
    {%- for file in sample_requested_files %}
    {{ file }}
    {%- endfor %}
    ```
    The human will then provide the requested file contents in the next message.
{% endif %}
## Repository Structure

```
{{ folder_structure_diagram }}
```

{% if files %}
## Complete File Contents

{% include 'lc-files.j2' %}
{% endif %}

{% if highlights %}
## Code Outlines - Implementation Retrieval

Smart outlines highlighting important definitions in the codebase.
{% if sample_definitions %}
Instructions for AI:: The following outlines show definition declarations in files. To retrieve full implementations of any function, class, or method shown here:

> **Note:** Implementation retrieval doesn't support C/C++ files.

1. Using the lc-get-implementations tool:
   ```json
   {
     "root_path": "{{ abs_root_path }}",
     "queries": [
       {% for path, name in sample_definitions %}
       ["{{ path }}", "{{ name }}"]{% if not loop.last %},{% endif %}
       {% endfor %}
     ]
   }
   ```

2. Without tools: Copy these references to clipboard:
   ```
   {% for path, name in sample_definitions %}
   {{ path }}:{{ name }}
   {% endfor %}
   ```
   Then ask the human to run `lc-clip-implementations`

NOTE: Prefer requesting specific implementations rather than entire files when possible.
{% endif %}

{% include 'lc-highlights.j2' %}
{% endif %}
## FINAL REMINDER

Instructions for AI: ‚ö†Ô∏è DO NOT REQUEST ADDITIONAL CONTEXT. This document already contains complete project context. Use the content provided here for your analysis.