<!-- livebook:{"app_settings":{"access_type":"public","slug":"genimage"}} -->

# Image Generation Kino App

```elixir
Mix.install([
  {:openai_ex, "~> 0.9.6"},
  {:kino, "~> 0.15.3"}
])

alias OpenaiEx
alias OpenaiEx.Images
```

## Simple Kino UI

```elixir
openai = System.fetch_env!("LB_OPENAI_API_KEY") |> OpenaiEx.new()
```

set default parameters for image generation, and define a function to fetch generated images from a URL.

```elixir
size = "256x256"
n = 4

fetch_blob = fn url ->
  Finch.build(:get, url) |> Finch.request!(OpenaiEx.Finch) |> Map.get(:body)
end
```

### Prompt / Response UI

```elixir
text_input = Kino.Input.textarea("Describe Image")

form = Kino.Control.form([text: text_input], submit: "Generate")
frame = Kino.Frame.new()

Kino.listen(form, fn %{data: %{text: prompt}} ->
  Kino.Frame.render(frame, Kino.Text.new("Running..."))

  res_urls =
    openai
    |> Images.generate!(%{
      prompt: prompt,
      n: n,
      size: size
    })
    #   |> IO.inspect()
    |> Map.get("data")
    |> Enum.map(fn x -> x["url"] end)

  res_urls
  |> Enum.map(fn x -> x |> fetch_blob.() |> Kino.Image.new("image/png") end)
  |> Kino.Layout.grid(columns: 2)
  |> then(&Kino.Frame.render(frame, &1))
end)

Kino.Layout.grid([form, frame], boxed: true, gap: 16)
```

<!-- livebook:{"offset":1285,"stamp":{"token":"XCP.z6v6YeZ4AUWug7vQpJAqGS9qL3MBYOZtkCQKxp10CEsCLetWklepx0UU-f5foGk5QDGG5RaMFviyMpAGdA__lsZhKKGoukl_f1fsQ-zycl2FEiNiQW6n_YM","version":2}} -->
